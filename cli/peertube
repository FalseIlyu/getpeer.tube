#!/usr/bin/sh

# Docker Compose binary path
COMPOSE=/usr/local/bin/docker-compose

# Peertube: https raw url of docker production PeerTube setup
PEERTUBE_DOCKER_RAW_URL=https://raw.githubusercontent.com/kimsible/getpeer.tube/master

# PeerTube Working directory
WORKDIR=/var/peertube

# Colors
ORANGE='\033[0;33m'
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Response Type
ERROR=${RED}ERROR${NC}
DONE=${GREEN}done${NC}

# SERVER_TOOLS LIST
SERVER_TOOLS="
parse-log
create-transcoding-job
create-import-video-file-job
prune-storage
regenerate-thumbnails
optimize-old-videos
update-host
reset-password
plugin:install
plugin:uninstall
purge-old-account
get-admin-credentials
psql
postgres:down
postgres:dump
postgres:restore
postgres:up
stack:up
stack:down
stack:upgrade
stack:logs
stack:parse-error
certbot:init
postfix:get-dkim-record
nginx:check-config
nginx:reload
"

# Limit command to Server Tools List
if [ -z $1 ] || [ -z "`echo $SERVER_TOOLS | grep -o -w $1`" ]; then
  echo "\nUsage:	peertube SERVER_TOOL\n"
  echo "Server Tools:\n$SERVER_TOOLS"
  exit 1
fi

# Go to workir
cd $WORKDIR

missing_prerequisites=0

if [ ! -f .env ]; then
  echo "$ERROR: Docker-compose ENV VARS `$WORKDIR/docker-volume/.env` not found, can't run `peertube $1`."
fi

if [ ! -f docker-compose.yml ]; then
  echo "$ERROR: Docker-compose file `$WORKDIR/docker-volume/docker-compose.yml` not found, can't run `peertube $1`."
fi

# Exit if not all prerequisites
if [ "$missing_prerequisites" -ne 0 ]; then exit 1; fi

get_env() {
  grep -E -o "^$1=.*" .env | sed -E "s/$1=//g"
}

# Get postgres user
POSTGRES_USER=$(get_env POSTGRES_USER)

# Get postgres db
POSTGRES_DB=$(get_env POSTGRES_DB)

# Get postgres service name
PEERTUBE_DB_HOSTNAME=$(get_env PEERTUBE_DB_HOSTNAME)

# Get webserver hostname
PEERTUBE_WEBSERVER_HOSTNAME=$(get_env PEERTUBE_WEBSERVER_HOSTNAME)

# Get admin email
PEERTUBE_ADMIN_EMAIL=$(get_env PEERTUBE_ADMIN_EMAIL)

#################
### FUNCTIONS ###
#################

# Test if a program is installed
has() {
  type "$1" > /dev/null 2>&1
}

curlf() {
  CURL_OUTPUT=`curl -sfSL --write-out "%{http_code}" $1`
  isHTTPCode=`echo $CURL_OUTPUT | grep -P '^[0-9]{3}'`

  if [ ! -z "$isHTTPCode" ] && [ "$CURL_OUTPUT" -ne 200 ]; then
    echo "${ERROR}: ${ORANGE}HTTP $CURL_OUTPUT${NC} - ${RED}$1${NC}"
    exit 1
  fi

  sh -c "$CURL_OUTPUT"
}

postgres_down() {
  # Stop and remove PostgreSQL container
  $COMPOSE rm -f -s -v $PEERTUBE_DB_HOSTNAME
}

postgres_dump() {
  if [ -z $1 ]; then
    echo "Usage:	peertube postgres:dump /PATH/FILENAME.tar"
    exit 1
  fi

  # Do not restore if PostgreSQL container is down
  if [ -z "$($COMPOSE ps -q $PEERTUBE_DB_HOSTNAME)" ]; then
    echo "$ERROR: PostgreSQL docker container is down, can't dump. First, you must run `peertube postgres:up`"
    exit 1
  fi

  # Dump PostgreSQL database
  $COMPOSE exec -T $PEERTUBE_DB_HOSTNAME pg_dump -U $POSTGRES_USER -Ft $POSTGRES_DB > $1
}

postgres_restore() {
  if [ -z $1 ]; then
    echo "Usage:	peertube postgres:restore /PATH/FILENAME.tar"
    exit 1
  fi

  missing_prerequisites=0

  if [ ! -f "$1" ]; then
    echo "$ERROR: Database dump archive `$1` not found, can't restore."
    missing_prerequisites=1
  fi

  # Do not restore if PostgreSQL container is down
  if [ -z "$($COMPOSE ps -q $PEERTUBE_DB_HOSTNAME)" ]; then
    echo "$ERROR: PostgreSQL docker container is down, can't restore. First, you must run `peertube postgres:up`"
    missing_prerequisites=1
  fi

  # Exit if not all prerequisites
  if [ "$missing_prerequisites" -ne 0 ]; then exit 1; fi

  # Run restore command
  $COMPOSE exec -T $PEERTUBE_DB_HOSTNAME pg_restore -U $POSTGRES_USER -d $POSTGRES_DB < $1
}

postgres_up() {
  $COMPOSE up -d $PEERTUBE_DB_HOSTNAME

  # Block stdout until database is up
  sleep 10s &
  while [ -z "`$COMPOSE logs --tail=2 $PEERTUBE_DB_HOSTNAME | grep -o 'database system is ready to accept connections'`" ]; do
    # Break if any database errors occur
    # Displays errors and exit
    db_errors=`$COMPOSE logs --tail=40 $PEERTUBE_DB_HOSTNAME | grep -i 'error'`
    if [ ! -z "$db_errors" ]; then
      echo $db_errors
      exit 1
    fi
    # Break after 10s / until pid of "sleep 10s" is destroyed
    # Display logs and exit
    if [ -z "`ps -ef | grep $! | grep -o -E 'sleep 10s'`" ]; then
      $COMPOSE logs --tail=40 $PEERTUBE_DB_HOSTNAME
      exit 1
    fi
  done
}

stack_up() {
  $COMPOSE up -d
}

stack_down() {
  if [ -z "$1" ]; then
    $COMPOSE rm -s -f $($COMPOSE ps -a --services | sed -E 's/webserver//g')
  else
    $COMPOSE down -v --remove-orphans
  fi
}

generate_ssl_certificate() {
  docker run --rm \
  --name certbot \
  -p 80:80 \
  -v "$(pwd)/docker-volume/certbot/conf:/etc/letsencrypt" \
  certbot/certbot certonly \
  --standalone \
  --domain $PEERTUBE_WEBSERVER_HOSTNAME \
  --email $PEERTUBE_ADMIN_EMAIL \
  --no-eff-email \
  --agree-tos \
  --non-interactive
}

if [ "$1" = "purge-old-account" ]; then

  username=$2
  if [ -z "$username" ]; then
    echo "\nUsage:	peertube purge-old-account USERNAME\n"
    exit 1
  fi

  count=`$COMPOSE exec -T $PEERTUBE_DB_HOSTNAME psql -t -U $POSTGRES_USER $POSTGRES_DB -c "SELECT count(*) FROM account WHERE name = '$username';" | xargs`
  if [ "$count" -gt 0 ]; then
    echo "$ERROR: can't purge an existing account"
    exit 1
  fi

  # Run psql delete command
  channelname=$username"_channel"
  $COMPOSE exec -T $PEERTUBE_DB_HOSTNAME psql -e -U $POSTGRES_USER $POSTGRES_DB -c "DELETE FROM actor WHERE \"preferredUsername\" = '$username';"
  $COMPOSE exec -T $PEERTUBE_DB_HOSTNAME psql -e -U $POSTGRES_USER $POSTGRES_DB -c "DELETE FROM actor WHERE \"preferredUsername\" = '$channelname';"

elif [ "$1" = "psql" ]; then

  # Run psql command
  $COMPOSE exec -T $PEERTUBE_DB_HOSTNAME psql -U $POSTGRES_USER $POSTGRES_DB -c "$2"

elif [ "$1" = "postgres:down" ]; then

  postgres_down

elif [ "$1" = "postgres:dump" ]; then

  postgres_dump $2

elif [ "$1" = "postgres:restore" ]; then

  postgres_restore $2

elif [ "$1" = "postgres:up" ]; then

  postgres_up

elif [ "$1" = "stack:up" ]; then

  stack_up

elif [ "$1" = "stack:down" ]; then

  if [ "$2" = "--force" ]; then
    stack_down 1
  else
    stack_down
  fi

elif [ "$1" = "stack:upgrade" ]; then

  # root
  uid=`id -u`
  if [ "$uid" -ne 0 ]; then
    echo "$ERROR: this script must be run as root or as a sudoer user with sudo"
    exit 1
  fi

  cat <<EOF
/====================================\\
|     WARNING BEFORE ANY UPGRADE     |
\\====================================/

 Don't forget to backup $WORKDIR
 Be sure to edit/merge any new configuration files
 Breaking changes here: https://github.com/Chocobozzz/PeerTube/releases

 This script will automatically:

 → update docker-commpose and current CLI
 → down docker stack but nginx
 → export the database
 → pull latest images
 → re-import database
 → check nginx config and reload on-the-fly
 → re-up docker stack

EOF

  read -p "Continue (y/N)? " CONFIRM

  if [ "$CONFIRM" = "y" ]; then
    # Upgrade docker-compose and current CLI
    curlf "$PEERTUBE_DOCKER_RAW_URL/script/index.sh"

    # Pull images
    echo "\nPull docker images \\"
    $COMPOSE pull

    # Down peertube to not conflict upgrade
    echo "\nDown peertube to not conflict upgrade \\"
    $COMPOSE rm -s -f peertube

    # PeerTube Archive Dump for upgrade
    DB_DUMP=/tmp/peertube-db-dump.tar

    # Dump existing database to easier migrate if any PostgreSQL version upgrade
    echo "\nDump PostgreSQL to easier migrate \\"
    postgres_dump $DB_DUMP

    # Down all containers
    echo "\nDown all containers but nginx \\"
    stack_down

    # Re-init existing database
    # Remove db files
    echo -n "\nRemove PostgreSQL mounted volume ... "
    rm -rf ./docker-volume/db
    echo $DONE

    # Re-Up PostgreSQL container
    echo "\nRe-Up PostgreSQL only \\"
    postgres_up

    # Run restore command
    echo "\nRestore PostgreSQL dump \\"
    postgres_restore $DB_DUMP

    # Clean database archive dump
    echo -n "Clean PostgreSQL dump ... "
    rm -f $DB_DUMP
    echo $DONE

    # Re-up stack
    echo "\nRe-up docker stack \\"
    stack_up

    # Check nginx config
    echo "\nCheck nginx config \\"
    $COMPOSE exec webserver nginx -t
    echo $DONE

    # Reload nginx
    echo "\nReload nginx \\"
    $COMPOSE exec webserver nginx -s reload
    echo $DONE

    # Upgraded message
    echo "\n${GREEN}The PeerTube Docker stack has been upgraded!${NC}"
  fi

elif [ "$1" = "postfix:get-dkim-record" ]; then

  cat ./docker-volume/opendkim/keys/*/*.txt

elif [ "$1" = "get-admin-credentials" ]; then

  username=`$COMPOSE logs peertube | grep -A1 -E -o "Username: [0-9a-zAZ-Z]*"`
  password=`$COMPOSE logs peertube | grep -A1 -E -o "User password: [0-9a-zAZ-Z]*"`

  if [ ! -z "$username" ] && [ ! -z "$password" ]; then
    echo $username
    echo $password
  else # If credentials are not found in compose logs
    if [ ! -f docker-volume/data/logs/peertube.log ]; then
      echo "$ERROR: Can't display Admin Credentials, missing docker-volume/data/logs/peertube.log"
      exit 1
    else
      username=`cat docker-volume/data/logs/peertube.log | grep -A1 -E -o "Username: [0-9a-zAZ-Z]*"`
      password=`cat docker-volume/data/logs/peertube.log | grep -A1 -E -o "User password: [0-9a-zAZ-Z]*"`

      if [ ! -z "$username" ] && [ ! -z "$password" ]; then
        echo $username
        echo $password
      else
        echo "$ERROR: Missing Admin Credentials in logs"
        exit 1
      fi
    fi
  fi

elif [ "$1" = "certbot:init" ]; then

  generate_ssl_certificate

elif [ "$1" = "stack:logs" ]; then

  $COMPOSE logs

elif [ "$1" = "stack:parse-error" ]; then

  $COMPOSE logs | grep -i error

elif [ "$1" = "nginx:check-config" ]; then

  $COMPOSE exec webserver nginx -t

elif [ "$1" = "nginx:reload" ]; then

  $COMPOSE exec webserver nginx -s reload

else

  # Run ServerTools command
  $COMPOSE exec -u peertube -e NODE_CONFIG_DIR=/config -e NODE_ENV=production peertube npm run $@

fi
